
from __future__ import division,print_function

ncell_i = 4
ncell_j = 1
ncell_k = 1

ncell = array([ncell_i, ncell_j, ncell_k])


qe_x = zeros(hstack( (ncell+1,3) ))
qb_x = zeros(hstack( (ncell,3) ))

# Set X-component
qe_x[:,0,0, 0] = linspace(0, 10, ncell_i+1)
qe_x[:,0,1, 0] = linspace(0, 10, ncell_i+1)
qe_x[:,1,0, 0] = linspace(0, 10, ncell_i+1)
qe_x[:,1,1, 0] = linspace(0, 10, ncell_i+1)

qe_x[:,0,:, 1] = 0.
qe_x[:,1,:, 1] = 1.

qe_x[:,:,0, 2] = 0.
qe_x[:,:,1, 2] = 1.

ii = arange(0,ncell_i); ip = ii+1
jj = arange(0,ncell_j); jp = jj+1
kk = arange(0,ncell_k); kp = kk+1
qb_x[ii,jj,kk, :] = 0.125*(qe_x[ii,jj,kk, :] +
                           qe_x[ii,jj,kp, :] +
                           qe_x[ii,jp,kk, :] +
                           qe_x[ii,jp,kp, :] +
                           qe_x[ip,jj,kk, :] +
                           qe_x[ip,jj,kp, :] +
                           qe_x[ip,jp,kk, :] +
                           qe_x[ip,jp,kp, :])

clf()
plot(qe_x[:,:,0, 0], qe_x[:,:,0, 1], 'or')
plot(qb_x[:,:,0, 0], qb_x[:,:,0, 1], 'ok')
xlim(qe_x[:,:,:, 0].min()-0.5, qe_x[:,:,:, 0].max()+0.5)
ylim(qe_x[:,:,:, 1].min()-0.5, qe_x[:,:,:, 1].max()+0.5)
#axes('equal')

# q1=linspace(0,1,10)
# q2=linspace(0,2,20)

# qex,qey=meshgrid(q1, q2, indexing='ij')
# qex = qex * (1.+sqrt(qex**2+qey**2))


# qbx = 0.25*(qex[0:-1,0:-1] + qex[0:-1,1: ] + qex[1: ,0:-1] + qex[1: ,1: ])
# qby = 0.25*(qey[0:-1,0:-1] + qey[0:-1,1: ] + qey[1: ,0:-1] + qey[1: ,1: ])

# clf()
# pcolor(qex, qey, rand(*qex.shape), edgecolors='k', lw=1.5, alpha=.5)
# pcolor(qbx, qby, rand(*qbx.shape), edgecolors='k', lw=1.0, alpha=.5,linestyle='--',facecolor=None)
# grid('on')
